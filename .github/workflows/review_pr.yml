name: AI Code Review with ChatGPT

on:
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  ai-review:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm install @octokit/rest openai --save-dev

      - name: Run AI Code Review
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          node -e '
            (async () => {
              try {
                const { Octokit } = await import("@octokit/rest");
                const OpenAI = await import("openai");

                const octokit = new Octokit({ auth: process.env.GITHUB_TOKEN });
                const [owner, repo] = process.env.GITHUB_REPOSITORY.split("/");
                const pull_number = process.env.GITHUB_REF.split("/")[2];

                const prResponse = await octokit.pulls.get({
                  owner,
                  repo,
                  pull_number,
                });
                const prTitle = prResponse.data.title;
                const prBody = prResponse.data.body || "No description provided";

                const filesResponse = await octokit.pulls.listFiles({
                  owner,
                  repo,
                  pull_number,
                });

                const files = await Promise.all(filesResponse.data.map(async f => {
                  let fileContent = "";
                  if (f.status === "modified" || f.status === "added") {
                    try {
                      const contentResponse = await octokit.repos.getContent({
                        owner,
                        repo,
                        path: f.filename,
                        ref: prResponse.data.head.sha,
                      });
                      fileContent = Buffer.from(contentResponse.data.content, "base64").toString("utf8");
                    } catch (e) {
                      fileContent = "[Unable to fetch full content]";
                    }
                  }
                  return `${f.filename} (Status: ${f.status}):\\n` +
                         `Changes:\\n${f.patch || "No changes"}\\n` +
                         `Full content:\\n${fileContent}\\n` +
                         `Lines added: ${f.additions}, Lines removed: ${f.deletions}`;
                })).then(results => results.join("\\n\\n"));

                const openai = new OpenAI.default({
                  apiKey: process.env.OPENAI_API_KEY,
                });

                const aiResponse = await openai.chat.completions.create({
                  model: "gpt-4o-mini",
                  messages: [
                    {
                      role: "system",
                      content: "Bạn là một senior developer với 10+ năm kinh nghiệm thực chiến. Hãy review code trong pull request này một cách chi tiết và thực tế:\\n" +
                               "Consider:\\n" +
                               "1. **Code quality**: Đánh giá tính sạch sẽ, tuân thủ best practices (DRY, SOLID), và có dễ mở rộng không.\\n" +
                               "2. **Bugs/Edge cases**: Tìm lỗi logic, bug nghiêm trọng, hoặc trường hợp biên chưa xử lý.\\n" +
                               "3. **Performance**: Chỉ ra đoạn code kém tối ưu (CPU, memory, I/O) và cách cải thiện.\\n" +
                               "4. **Readability**: Kiểm tra code có dễ hiểu không (đặt tên, cấu trúc, comment); đề xuất cách làm rõ hơn.\\n" +
                               "5. **Security**: Phát hiện lỗ hổng cụ thể (injection, data leak, auth issues) và cách khắc phục.\\n" +
                               "Trả lời bằng bullet points, mỗi điểm kèm: đoạn code lỗi (nếu có), code mẫu để fix, và lý do ngắn gọn. Tập trung vào vấn đề quan trọng, tránh lan man."
                    },
                    {
                      role: "user",
                      content: `PR Title: ${prTitle}\\nPR Description: ${prBody}\\n\\nFiles:\\n${files}`
                    }
                  ],
                  max_tokens: 10000,
                  temperature: 0.5
                });

                const reviewContent = aiResponse.choices[0].message.content;

                await octokit.issues.createComment({
                  owner,
                  repo,
                  issue_number: pull_number,
                  body: `### AI Code Review by Senior Bot\n\n${reviewContent}`,
                });
              } catch (error) {
                console.error("Error during AI review:", error);
                const { Octokit } = await import("@octokit/rest");
                const octokit = new Octokit({ auth: process.env.GITHUB_TOKEN });
                await octokit.issues.createComment({
                  owner: process.env.GITHUB_REPOSITORY.split("/")[0],
                  repo: process.env.GITHUB_REPOSITORY.split("/")[1],
                  issue_number: process.env.GITHUB_REF.split("/")[2],
                  body: "### AI Code Review Failed\nCó lỗi xảy ra trong quá trình review: " + error.message,
                });
                process.exit(1);
              }
            })();
          '